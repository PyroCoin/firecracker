import hashlib
import json
from time import time
from urllib.parse import urlparse
from uuid import uuid4

import requests
from flask import Flask, jsonify, request

class BlockChain(object):
    def __init__(self):
        
        self.currentTransactions = []
        #List of current transaction that haven't been added to a block yet

        self.chain = []
        #The entire list of every block that has been made

        self.newBlock(previousHash=1, proof=100)
        #Creates the genesis block

    def newBlock(self, proof, previousHash=None):
        '''
        Adds a block
        uses the following:

        proof = The integer generated by the proof of work 
        previousHash = the hash of the previous block, an optional value 

        '''
        block = {
            'index': len(self.chain),
            'timestamp': time(),
            'proof': proof,
            'previousHash': previousHash or self.hash(self.chain[-1]),
            'transactions': self.currentTransactions,

        }
        #Block Headers!
        self.currentTransactions = []
        #Resets the current transactions for the new block

        self.chain.append(block)
        #adds the block to the chain

        return(block)


    def newTransaction(self, sender, recipient, amount):
        '''
        Creates a new transaction waiting to be added to the next block. 
        Each new transaction includes the following data:

        Sender: the address of the sender
        Recipient: the adress of the person who is on the recieving end of the transaction
        amount: the amount of money sent 
        '''
        
        self.currentTransactions.append({

            'sender': sender,
            'recipient': recipient,
            'amount': amount,

            })

        return self.lastBlock['index'] + 1
    
    @property
    def lastBlock(self):
        #returns the last block, creating a blockchain
        return self.chain[-1]
    
    @staticmethod
    def hash(block):
        '''Hashes the block using SHA256'''
        
        blockString = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(blockString).hexdigest()

    
    def proof_of_work(self, lastProof):
        '''
        The proof of working algorithm
        '''

        proof = 0

        while self.validProof(lastProof, proof) is False:
            proof += 1

        return proof


    @staticmethod
    def validProof(lastProof, proof):
        '''Essentially validates the proof'''

        guess = f'{lastProof}{proof}'.encode()
        guessHash = hashlib.sha256(guess).hexdigest()

        return guesshash[:4] == "0000"






''' 
This class essentially creates the actual chain
'''

app = Flask(__name__)
#Instantiate our Node

nodeIdentifier = str(uuid4()).replace('-', '')
#Creates a specifier indetifier for the node

blockchain = BlockChain()

@app.route('/mine', methods=['GET'])
def mine():
    lastBlock = blockchain.lastBlock
    lastProof = lastBlock['proof']
    proof = blockchain.proof_of_work(lastProof)

    blockchain.newTransaction(
        sender='0',
        recipient=nodeIdentifier,
        amount=7,
    )

    response = {
        'message': 'New Block Made',
        'index': block['index'],
        'proof': block['proof'],
        'previous_hash': block['previous_hash'],
    }

@app.route('/transactions/new', methods=['POST'])
def newTransaction():
    values = request.get_json()
    required = ['sender', 'recipient', 'amount']
    if not all(k in values for k in required):
        return 'Missing values', 400
    
    index = blockchain.newTransaction(values['sender'], values['recipient'], values['amount'])

    response = {'message': f'Transaction will be added to Block {index}'}
    return jsonify(response), 201




@app.route('/chain', methods=['GET'])
def fullChain():
    response = {
        'chain': blockchain.chain,
        'length': len(blockchain.chain)
    }
    return jsonify(response), 200

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)

